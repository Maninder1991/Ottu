// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Ottu
import Foundation
@_exported import Ottu
import PassKit
import SkeletonView
import Swift
import UIKit
import WebKit
import _Concurrency
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MaterialLoadingIndicator : Ottu.LBIndicator {
  @_Concurrency.MainActor(unsafe) override open var color: UIKit.UIColor {
    @_Concurrency.MainActor(unsafe) get
    @_Concurrency.MainActor(unsafe) set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var lineWidth: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var bounds: CoreGraphics.CGRect {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) convenience public init(radius: CoreGraphics.CGFloat = 18.0, color: UIKit.UIColor = .gray)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) override open func startAnimating()
  @_Concurrency.MainActor(unsafe) override open func stopAnimating()
  @_Concurrency.MainActor(unsafe) override open func setupAnimation(in layer: QuartzCore.CALayer, size: CoreGraphics.CGSize)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class LBIndicator : UIKit.UIView, Ottu.IndicatorProtocol {
  @_Concurrency.MainActor(unsafe) open var isAnimating: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var radius: CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) open var color: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) convenience public init(radius: CoreGraphics.CGFloat = 18.0, color: UIKit.UIColor = .gray)
  @_Concurrency.MainActor(unsafe) open func startAnimating()
  @_Concurrency.MainActor(unsafe) open func stopAnimating()
  @_Concurrency.MainActor(unsafe) open func setupAnimation(in layer: QuartzCore.CALayer, size: CoreGraphics.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol IndicatorProtocol {
  var radius: CoreGraphics.CGFloat { get set }
  var color: UIKit.UIColor { get set }
  var isAnimating: Swift.Bool { get }
  func startAnimating()
  func stopAnimating()
  func setupAnimation(in layer: QuartzCore.CALayer, size: CoreGraphics.CGSize)
}
public enum NetworkErrorReason : Swift.Error {
  case FailureErrorCode(code: Swift.Int, message: Swift.String, userInfo: [Swift.String : Any]?)
  case InternetNotReachable
  case UnAuthorizedAccess
  case Other
}
public protocol Check_JB : AnyObject {
  func sendTheStatusOfJailBreak(value: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class LoadingButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public var isLoading: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var shadowAdded: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var indicator: UIKit.UIView & Ottu.IndicatorProtocol
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var withShadow: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var cornerRadius: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var bgColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var shadowLayer: UIKit.UIView?
  @_Concurrency.MainActor(unsafe) open var entireViewGroup: [UIKit.UIView] {
    get
  }
  @available(iOS 13.0, *)
  public enum ButtonStyle {
    case fill
    case outline
    public static func == (a: Ottu.LoadingButton.ButtonStyle, b: Ottu.LoadingButton.ButtonStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) public init(frame: CoreGraphics.CGRect = .zero, icon: UIKit.UIImage? = nil, text: Swift.String? = nil, textColor: UIKit.UIColor? = .white, font: UIKit.UIFont? = nil, bgColor: UIKit.UIColor = .black, cornerRadius: CoreGraphics.CGFloat = 12.0, withShadow: Swift.Bool = false)
  @available(iOS 13.0, tvOS 13.0, *)
  @_Concurrency.MainActor(unsafe) convenience public init(icon: UIKit.UIImage? = nil, text: Swift.String? = nil, font: UIKit.UIFont? = nil, cornerRadius: CoreGraphics.CGFloat = 12.0, withShadow: Swift.Bool = false, buttonStyle: Ottu.LoadingButton.ButtonStyle)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func showLoader(userInteraction: Swift.Bool, _ completion: Ottu.LBCallback = nil)
  @_Concurrency.MainActor(unsafe) open func showLoaderWithImage(userInteraction: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open func showLoader(_ viewsToBeHidden: [UIKit.UIView?], userInteraction: Swift.Bool = false, _ completion: Ottu.LBCallback = nil)
  @_Concurrency.MainActor(unsafe) open func hideLoader(_ completion: Ottu.LBCallback = nil)
  @_Concurrency.MainActor(unsafe) public func fillContent()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc deinit
}
extension UIKit.UIActivityIndicatorView : Ottu.IndicatorProtocol {
  @_Concurrency.MainActor(unsafe) public var radius: CoreGraphics.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var color: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func setupAnimation(in layer: QuartzCore.CALayer, size: CoreGraphics.CGSize)
}
public protocol OttuDelegate {
  func success(_ message: Swift.String, response: [Swift.String : Any]?)
  func fail(_ message: Swift.String, response: [Swift.String : Any]?)
  func dismissed()
}
public typealias LBCallback = (() -> Swift.Void)?
extension UIKit.UIColor {
  public func RGBtoCMYK(red: CoreGraphics.CGFloat, green: CoreGraphics.CGFloat, blue: CoreGraphics.CGFloat) -> (cyan: CoreGraphics.CGFloat, magenta: CoreGraphics.CGFloat, yellow: CoreGraphics.CGFloat, key: CoreGraphics.CGFloat)
  public func CMYKtoRGB(cyan: CoreGraphics.CGFloat, magenta: CoreGraphics.CGFloat, yellow: CoreGraphics.CGFloat, key: CoreGraphics.CGFloat) -> (red: CoreGraphics.CGFloat, green: CoreGraphics.CGFloat, blue: CoreGraphics.CGFloat)
  public func getColorTint() -> UIKit.UIColor
}
extension UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) open func setImage(_ image: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) open func setTitle(_ text: Swift.String?)
}
extension UIKit.UIImage {
  convenience public init?(_ color: UIKit.UIColor, size: CoreGraphics.CGSize = CGSize(width: 1, height: 1))
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) open func setCornerBorder(color: UIKit.UIColor? = nil, cornerRadius: CoreGraphics.CGFloat = 15.0, borderWidth: CoreGraphics.CGFloat = 1.5)
  @_Concurrency.MainActor(unsafe) open func setAsShadow(bounds: CoreGraphics.CGRect, cornerRadius: CoreGraphics.CGFloat = 0.0, shadowRadius: CoreGraphics.CGFloat = 1)
  @_Concurrency.MainActor(unsafe) public func addSubViews(_ views: [UIKit.UIView])
  @_Concurrency.MainActor(unsafe) public func centerSubView(_ view: UIKit.UIView)
}
public class Ottu {
  public init(_ sessionId: Swift.String, merchantId: Swift.String, viewController: UIKit.UIViewController, delegate: Ottu.OttuDelegate, language: Swift.String)
  @objc deinit
}
@available(iOS 13.0, *)
extension Ottu.LoadingButton.ButtonStyle : Swift.Equatable {}
@available(iOS 13.0, *)
extension Ottu.LoadingButton.ButtonStyle : Swift.Hashable {}
